import React from 'react';
//===== redux =====//
import { useGetRandomAnimalsQuery } from '../../../store/api/publicApi';
//===== assets =====//
import './ReadyGoHome.scss';
//===== components =====//
import { BsArrowRightCircle as ArrowRightCircleIcon } from "react-icons/bs";
import PhotoDog from '../../../assets/dog.jpg';

const ReadyGoHome = () => {

  const { data: animals, isLoading, isError, error } = useGetRandomAnimalsQuery(18);
  
  console.log('Состояние запроса:', {
    isLoading,
    isError, 
    error,
    animals
  });

  // Функция для получения первой фотографии животного
  const getFirstAnimalPhoto = (animal) => {
    if (animal.animalPhotosData && animal.animalPhotosData.photos && animal.animalPhotosData.photos.length > 0) {
      return animal.animalPhotosData.photos[0].url;
    }
    return PhotoDog; // Заглушка если фото нет
  };

  // Функция для преобразования данных животных в gridData формат
  const transformAnimalsToGridData = (animals) => {
    if (!animals || animals.length === 0) return [];
    
    const gridData = [];
    let animalIndex = 0;

    const textContents = [
        { 
            className: 'item-2-4', 
            title: '3', 
            descr: 'питомца в этом месяце стали домашними' 
        },
        { 
            className: 'item-2-6', 
            descr: '30% подопечных — старички и инвалиды, нуждающиеся в постоянном уходе' 
        },
        { 
            className: 'item-3-1', 
            descr: 'У каждого питомца свой характер, особенности и жизненная история' 
        }
    ];

    // Создаем структуру сетки 3x6
    for (let row = 0; row < 3; row++) {
        const rowData = [];
        
        for (let col = 0; col < 6; col++) {
            if ((row === 0 && (col === 1 || col === 4)) || 
                (row === 2 && col === 2)) {
                rowData.push({ type: 'empty' });
            } else if ((row === 1 && col === 3) || 
                      (row === 1 && col === 5) || 
                      (row === 2 && col === 0)) {
                let textIndex;
                if (row === 1 && col === 3) textIndex = 0;
                else if (row === 1 && col === 5) textIndex = 1;
                else if (row === 2 && col === 0) textIndex = 2;
                
                rowData.push({ 
                    type: 'text', 
                    textData: textContents[textIndex] // Сохраняем данные, а не JSX
                });
            } else {
                if (animalIndex < animals.length) {
                    const animal = animals[animalIndex];
                    rowData.push({
                        type: 'image',
                        src: getFirstAnimalPhoto(animal),
                        name: animal.animalName,
                        age: `${animal.age} ${getAgeSuffix(animal.age)}`,
                        animalData: animal
                    });
                    animalIndex++;
                } else {
                    rowData.push({ type: 'empty' });
                }
            }
        }
        
        gridData.push(rowData);
    }
    
    return gridData;
  };

  // Вспомогательная функция для правильного склонения возраста
  const getAgeSuffix = (age) => {
    if (age % 10 === 1 && age % 100 !== 11) return 'год';
    if ([2, 3, 4].includes(age % 10) && ![12, 13, 14].includes(age % 100)) return 'года';
    return 'лет';
  };

  // Преобразуем данные животных в grid формат
  const gridData = transformAnimalsToGridData(animals);

  return (
    <section className="ReadyGoHome">
      <div className="ReadyGoHome__wrapper">
        <div className="ReadyGoHome__container">
          <div className="ReadyGoHome__content">
            <div className="ReadyGoHome__content-header">

              <div className="ReadyGoHome__header-text">
                Наша команда создает для подопечных максимально комфортные условия жизни
              </div>

              <div className="ReadyGoHome__header-svg">
                <svg xmlns="http://www.w3.org/2000/svg" width="1173" height="729" viewBox="0 0 1173 729" fill="none">
                  <g clipPath="url(#clip0_4206_26871)">
                    <path d="M337.64 137.47C337.64 154.137 340.887 168.804 347.38 181.47C353.586 193.732 363.183 203.954 375.03 210.92C387.03 217.914 401.257 221.41 417.71 221.41C434.163 221.41 448.36 217.914 460.3 210.92C472.189 203.976 481.824 193.751 488.05 181.47C494.543 168.804 497.79 154.137 497.79 137.47C497.79 120.664 494.543 105.974 488.05 93.4004C481.864 81.0918 472.22 70.8565 460.3 63.9504C448.36 56.8904 434.163 53.3604 417.71 53.3604C401.257 53.3604 387.03 56.8904 375.03 63.9504C363.153 70.8786 353.546 81.1105 347.38 93.4004C340.88 105.974 337.633 120.664 337.64 137.47ZM387.31 111.83C389.93 104.417 393.78 98.557 398.86 94.2504C403.94 89.9437 410.297 87.7904 417.93 87.7904C425.41 87.7904 431.657 89.9437 436.67 94.2504C441.683 98.557 445.463 104.417 448.01 111.83C450.742 119.997 452.068 128.569 451.93 137.18C452.065 145.778 450.739 154.336 448.01 162.49C445.47 169.91 441.69 175.774 436.67 180.08C431.65 184.387 425.403 186.504 417.93 186.43C410.37 186.43 404.013 184.314 398.86 180.08C393.707 175.847 389.857 169.974 387.31 162.46C384.656 154.301 383.369 145.759 383.5 137.18C383.363 128.578 384.651 120.012 387.31 111.83V111.83Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M613.48 285.48V448.18H690.39C704.717 448.18 717.003 445.847 727.25 441.18C737.497 436.514 745.35 429.95 750.81 421.49C756.25 413.01 758.97 403.194 758.97 392.04C758.97 374.88 752.933 361.18 740.86 350.94C728.787 340.7 711.963 335.547 690.39 335.48H656.6V285.48H613.48ZM690.39 370.96C697.937 370.96 704.15 372.96 709.03 376.96C711.367 378.775 713.253 381.106 714.538 383.771C715.824 386.435 716.475 389.362 716.44 392.32C716.444 395.169 715.775 397.978 714.487 400.518C713.199 403.059 711.329 405.26 709.03 406.94C704.157 410.747 697.943 412.654 690.39 412.66H656.6V370.96H690.39Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M545.49 218.18H588.5V90.9705H640.93V55.4805H493.48V90.9705H545.49V218.18Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M311.03 448.18L262.62 366.83L309.76 285.48H263.47L232.86 342.37L202.99 285.48H156.38L202.99 366.83L154.69 448.18H201.29L232.86 391.94L264.95 448.18H311.03Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M259.09 39.06H357.17V1.25H213.22V218.18H259.09V39.06Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M117.45 445.18C127.111 441.469 135.752 435.516 142.66 427.81C149.212 420.338 153.693 411.281 155.66 401.54L113.92 398.79C112.488 402.721 110.18 406.274 107.17 409.18C104.116 412.056 100.466 414.224 96.48 415.53C92.0379 416.989 87.3854 417.706 82.71 417.65C75.15 417.65 68.6167 416.063 63.11 412.89C57.6067 409.716 53.1508 405.003 50.29 399.33C47.3033 393.483 45.81 386.533 45.81 378.48V378.38H156.61V365.98C156.61 352.14 154.67 340.067 150.79 329.76C147.324 320.045 141.75 311.217 134.47 303.91C127.569 297.072 119.254 291.829 110.11 288.55C100.505 285.026 90.3411 283.268 80.11 283.36C64.15 283.36 50.24 286.89 38.38 293.95C26.6096 300.995 17.0911 311.249 10.94 323.51C4.45335 336.177 1.20668 350.863 1.20001 367.57C1.20001 384.73 4.44668 399.597 10.94 412.17C17.149 424.35 26.8028 434.435 38.7 441.17C50.7733 447.963 65.1933 451.36 81.96 451.36C95.38 451.36 107.21 449.3 117.45 445.18ZM62.69 321.81C68.2073 318.57 74.513 316.919 80.91 317.04C86.9505 316.906 92.9146 318.409 98.17 321.39C103.115 324.144 107.189 328.228 109.93 333.18C112.823 338.466 114.285 344.415 114.17 350.44H45.9C46.104 344.824 47.6468 339.339 50.4 334.44C53.2905 329.204 57.5353 324.842 62.69 321.81V321.81Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M207.57 516.48H82.81L78.57 569.65C77.9433 577.65 77.2033 585.56 76.35 593.38C75.6438 600.68 74.5119 607.933 72.96 615.1C71.7701 621.108 69.9223 626.967 67.45 632.57C65.2633 637.524 62.3667 641.127 58.76 643.38H46.25V726.85H90.31V679.18H189.81V726.85H232.81V643.38H207.57V516.48ZM164.99 643.38H103.66C108.46 635.82 111.99 626.004 114.25 613.93C116.81 599.28 118.543 584.496 119.44 569.65L121.13 551.18H164.99V643.38Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M855.29 502.5C871.29 502.5 884 498.58 893.42 490.74C902.84 482.9 907.607 472.567 907.72 459.74H876.26C876.318 464.605 874.584 469.321 871.39 472.99C868.143 476.804 862.777 478.707 855.29 478.7C847.59 478.7 842.117 476.76 838.87 472.88C835.768 469.214 834.111 464.542 834.21 459.74H802.96C802.96 472.6 807.657 482.934 817.05 490.74C826.443 498.547 839.19 502.467 855.29 502.5Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M931.73 140.01C924.883 136.27 916.583 134.044 906.83 133.33C918.477 131.29 927.587 127.337 934.16 121.47C937.322 118.756 939.844 115.376 941.547 111.573C943.25 107.77 944.091 103.637 944.01 99.4705C944.01 85.4171 938.187 74.5771 926.54 66.9505C914.893 59.3238 899.037 55.5005 878.97 55.4805H809.59V218.18H889.67C903.23 218.18 914.707 216.414 924.1 212.88C933.493 209.347 940.66 204.264 945.6 197.63C950.54 190.964 953.013 183.02 953.02 173.8C953.086 166.91 951.174 160.146 947.51 154.31C943.642 148.203 938.188 143.26 931.73 140.01V140.01ZM851.65 90.0105H878.97C885.97 90.0105 891.48 91.4238 895.5 94.2505C897.42 95.5364 898.979 97.292 900.029 99.3503C901.079 101.409 901.586 103.701 901.5 106.01C901.574 109.148 900.645 112.227 898.85 114.8C896.994 117.396 894.412 119.386 891.43 120.52C887.738 121.878 883.822 122.523 879.89 122.42H851.65V90.0105ZM904.4 179.94C900.867 182.907 895.957 184.39 889.67 184.39H851.67V148.91H889.67C895.957 148.91 900.867 150.577 904.4 153.91C907.933 157.244 909.733 161.8 909.8 167.58C909.81 172.77 908 176.91 904.4 179.94V179.94Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M1090.88 120.94C1078.81 110.627 1062.01 105.474 1040.46 105.48H1006.67V55.4805H963.56V218.18H1040.46C1054.8 218.18 1067.09 215.847 1077.32 211.18C1087.55 206.514 1095.39 199.947 1100.84 191.48C1106.28 183 1109 173.184 1109 162.03C1109 144.877 1102.96 131.18 1090.88 120.94ZM1059.1 176.94C1054.23 180.754 1048.02 182.66 1040.46 182.66H1006.67V140.96H1040.46C1048.02 140.96 1054.23 142.96 1059.1 146.96C1061.44 148.773 1063.33 151.103 1064.62 153.768C1065.9 156.433 1066.56 159.361 1066.52 162.32C1066.53 165.177 1065.86 167.994 1064.57 170.543C1063.28 173.091 1061.41 175.297 1059.1 176.98V176.94Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M825.42 619.651V516.48H782.31V679.18H827.11L885.48 575.701V679.18H928.48V516.48H883.99L825.42 619.651Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M357.27 524.95C345.337 517.89 331.143 514.36 314.69 514.36C298.237 514.36 284.007 517.89 272 524.95C260.126 531.883 250.521 542.113 244.35 554.4C237.863 566.967 234.617 581.654 234.61 598.46C234.61 615.127 237.857 629.794 244.35 642.46C250.559 654.721 260.155 664.942 272 671.91C284 678.897 298.23 682.394 314.69 682.4C331.15 682.407 345.343 678.91 357.27 671.91C369.164 664.972 378.8 654.745 385.02 642.46C391.52 629.794 394.77 615.127 394.77 598.46C394.77 581.66 391.52 566.974 385.02 554.4C378.837 542.089 369.192 531.853 357.27 524.95V524.95ZM344.98 623.46C342.44 630.88 338.663 636.744 333.65 641.05C328.637 645.357 322.387 647.474 314.9 647.4C307.353 647.4 301 645.284 295.84 641.05C290.68 636.817 286.83 630.954 284.29 623.46C279.21 606.966 279.21 589.325 284.29 572.83C286.897 565.424 290.747 559.564 295.84 555.25C300.933 550.937 307.287 548.784 314.9 548.79C322.393 548.79 328.643 550.944 333.65 555.25C338.657 559.557 342.433 565.417 344.98 572.83C350.207 589.302 350.207 606.988 344.98 623.46V623.46Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M1171.6 55.4805H1126.47V218.18H1171.6V55.4805Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M413.01 425.62V448.18H455.81V338.44C455.81 328.774 453.937 320.477 450.19 313.55C446.538 306.663 441.258 300.772 434.81 296.39C428.084 291.806 420.588 288.469 412.68 286.54C404.182 284.39 395.446 283.322 386.68 283.36C373.687 283.36 362.247 285.337 352.36 289.29C343.103 292.807 334.858 298.558 328.36 306.03C322.081 313.371 317.778 322.193 315.86 331.66L357.59 335.05C359.174 329.655 362.536 324.953 367.13 321.71C371.93 318.104 378.39 316.3 386.51 316.3C394.21 316.3 400.143 318.137 404.31 321.81C408.477 325.484 410.593 330.674 410.66 337.38V338.02C410.745 339.555 410.428 341.086 409.74 342.46C409.053 343.835 408.019 345.007 406.74 345.86C404.127 347.62 399.927 348.954 394.14 349.86C388.353 350.767 380.727 351.687 371.26 352.62C363.469 353.338 355.748 354.676 348.17 356.62C341.258 358.398 334.682 361.289 328.7 365.18C322.999 368.898 318.333 374 315.14 380.01C311.807 386.15 310.14 393.74 310.14 402.78C310.14 413.514 312.473 422.48 317.14 429.68C321.877 436.823 328.57 442.451 336.42 445.89C344.54 449.49 353.79 451.29 364.17 451.29C371.394 451.418 378.589 450.343 385.46 448.11C391.244 446.134 396.602 443.08 401.25 439.11C405.554 435.322 409.109 430.76 411.73 425.66L413.01 425.62ZM411.01 390.03C411.09 395.464 409.582 400.802 406.67 405.39C403.688 409.982 399.549 413.707 394.67 416.19C389.209 418.887 383.179 420.231 377.09 420.11C370.17 420.11 364.45 418.52 359.93 415.34C355.41 412.16 353.183 407.467 353.25 401.26C353.114 397.456 354.274 393.719 356.54 390.66C358.967 387.588 362.166 385.214 365.81 383.78C370.257 381.951 374.923 380.704 379.69 380.07L387.95 378.91C390.95 378.41 394.02 377.91 397.06 377.32C400.1 376.73 402.82 376.01 405.22 375.32C407.265 374.738 409.222 373.884 411.04 372.78L411.01 390.03Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M557.68 516.48H546.46L502.39 629.29L459.6 516.48H449.32H425.38H406.21V679.18H449.32V579.341L487.35 679.18H517.33L557.68 575.701V679.18H600.27V516.48H580.78H557.68Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M733.36 524.95C721.433 517.89 707.25 514.36 690.81 514.36C674.37 514.36 660.143 517.89 648.13 524.95C636.256 531.883 626.651 542.113 620.48 554.4C613.98 566.967 610.73 581.654 610.73 598.46C610.73 615.127 613.98 629.794 620.48 642.46C626.686 654.723 636.283 664.944 648.13 671.91C660.13 678.897 674.357 682.394 690.81 682.4C707.263 682.407 721.457 678.91 733.39 671.91C745.284 664.969 754.923 654.744 761.15 642.46C767.643 629.794 770.89 615.127 770.89 598.46C770.89 581.66 767.643 566.974 761.15 554.4C754.952 542.087 745.294 531.851 733.36 524.95V524.95ZM721.08 623.46C718.54 630.88 714.76 636.744 709.74 641.05C704.72 645.357 698.47 647.474 690.99 647.4C683.443 647.4 677.09 645.284 671.93 641.05C666.77 636.817 662.92 630.954 660.38 623.46C655.3 606.966 655.3 589.325 660.38 572.83C663 565.424 666.85 559.564 671.93 555.25C677.01 550.937 683.363 548.784 690.99 548.79C698.483 548.79 704.733 550.944 709.74 555.25C714.747 559.557 718.527 565.417 721.08 572.83C726.307 589.302 726.307 606.988 721.08 623.46V623.46Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M456.58 320.97H508.59V448.18H551.59V320.97H604.03V285.48H456.58V320.97Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                    <path d="M798.15 137.47C798.15 120.664 794.903 105.974 788.41 93.4004C782.223 81.089 772.575 70.8532 760.65 63.9504C748.717 56.8904 734.523 53.3604 718.07 53.3604C701.617 53.3604 687.387 56.8904 675.38 63.9504C663.506 70.8788 653.902 81.1109 647.74 93.4004C641.24 105.974 637.99 120.664 637.99 137.47C637.99 154.137 641.24 168.804 647.74 181.47C653.942 193.732 663.536 203.954 675.38 210.92C687.38 217.914 701.61 221.41 718.07 221.41C734.53 221.41 748.723 217.914 760.65 210.92C772.544 203.979 782.183 193.754 788.41 181.47C794.903 168.797 798.15 154.13 798.15 137.47ZM748.37 162.47C745.823 169.89 742.043 175.754 737.03 180.06C732.017 184.367 725.767 186.484 718.28 186.41C710.727 186.41 704.373 184.294 699.22 180.06C694.067 175.827 690.217 169.964 687.67 162.47C685.015 154.308 683.727 145.763 683.86 137.18C683.727 128.588 685.014 120.033 687.67 111.86C690.283 104.447 694.133 98.587 699.22 94.2803C704.307 89.9737 710.66 87.8204 718.28 87.8204C725.773 87.8204 732.023 89.9737 737.03 94.2803C742.037 98.587 745.817 104.447 748.37 111.86C751.096 120.019 752.418 128.58 752.28 137.18C752.414 145.767 751.092 154.315 748.37 162.46V162.47Z" stroke="#282828" strokeWidth="2.5" strokeMiterlimit="10"></path>
                  </g>
                  <defs>
                  <clipPath id="clip0_4206_26871">
                    <rect width="1172.85" height="728.1" fill="white"></rect>
                  </clipPath>
                  </defs>
                </svg>
              </div>

            </div>

            <div className="ReadyGoHome__animal-grid">
              {gridData.map((row, rowIndex) => (
                <div key={rowIndex} className="ReadyGoHome__animal-row">
                  {row.map((item, colIndex) => (
                    <div key={colIndex} className="ReadyGoHome__animal-item">
                      {item.type === 'image' ? (
                        <>
                          <img 
                            src={item.src} 
                            alt={item.name} 
                            className="ReadyGoHome__animal-img" 
                            onError={(e) => {
                              e.target.src = PhotoDog; // Fallback изображение
                            }}
                          />
                          <div className="ReadyGoHome__animal-descr">
                            <div className="ReadyGoHome__name">{item.name}</div>
                            <div className="ReadyGoHome__age">
                              <div className="ReadyGoHome__age-group">
                                <div className="ReadyGoHome__age-title">Возраст:</div>
                                <div className="ReadyGoHome__age-number">{item.age}</div>
                              </div>
                              <div className="ReadyGoHome__icon-wrapper">
                                <ArrowRightCircleIcon className='icon' />
                              </div>
                            </div>
                            <div className="ReadyGoHome__button-group">
                              <button className="ReadyGoHome__take-animal button">Забрать</button>
                              <button className="ReadyGoHome__help-animal button">Помочь</button>
                            </div>
                          </div>
                        </>
                      ) : item.type === 'text' ? (
                        <div className={item.textData.className}>
                            {item.textData.title && (
                                <span className='title'>{item.textData.title}</span>
                            )}
                            <span className='descr'>{item.textData.descr}</span>
                        </div>
                      ) : (
                        <div className="ReadyGoHome__empty-item"></div>
                      )}
                    </div>
                  ))}
                </div>
              ))}
            </div>

          </div>
        </div>
      </div>
    </section>
  )
}

export default ReadyGoHome;